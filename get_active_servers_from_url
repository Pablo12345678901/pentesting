#!/usr/bin/env bash

SYNTAX="\nSyntax:\n\t$(basename $0) URL\n" 

# Option management (basic)
if [ -z "$1" ]
then
    echo -e "\nERROR : please provide the url in first argument." >&2
    #    echo -e "\nSyntax:\n\t$(basename $0) URL\n"
    echo -e "$SYNTAX" >&2
    exit 1
fi

URL=$1

# Test if the url exists by getting the return code from the header.
URL_RETURN_CODE="$(curl -s --head "$URL" \
| head -n 1 \
| grep -E -o '[0-9]{3}'
)"

# Check if the return code is in the range 200-299 = good url
if [[ "$URL_RETURN_CODE" =~ ^2[0-9]{2}$ ]]
then
    :
else
    echo -e "\nERROR : invalid url \"$URL\" : get return code : $URL_RETURN_CODE.\n" >&2
    echo -e "$SYNTAX" >&2
    exit 2
fi

BASENAME_URL="$(basename $URL)"

# Get a list of IP addresses from a website
declare -a ARRAY_OF_IP_ADDRESSES
WEBPAGE_OUTPUT_FILENAME="webpage.txt"
# Get the webpage content within a file
curl "$URL" -o "$WEBPAGE_OUTPUT_FILENAME" &>/dev/null

if (($?))
then
    echo -e "\nERROR : could not get the webpage \"$URL\".\n" >&2
    exit 3
fi	

# Process the file
ARRAY_OF_IP_ADDRESSES=( $(cat "$WEBPAGE_OUTPUT_FILENAME" |
    # Get the lines with website
    grep -E -o 'href=".*"' |
    # Get only the website part
    cut -f 2 -d = |
    sort |
    cut -f 2 -d '"' |
    # Avoid getting dummy line not containing a website (example : '/' or '#')
    grep -E '^[a-zA-Z]{2,}.*$' |
    # Get the servers name
    cut -d '/' -f 3 |
    # Remove duplicatas
    uniq |
    # Show the hostnames (and protection in case no ip address is found)
    xargs -n 1 host 2>/dev/null |
    # Conserve only the 'has address' lines and ignore the 'alias' lines.
    grep -E 'has.*address' |
    # Keep only the IP address = the last field
    awk 'NF>1{print $NF}') )

# If no ip address was found exit with error
if [ ${#ARRAY_OF_IP_ADDRESSES[@]} -eq 0 ]
then
    echo -e "\nNo ip adress was found on the webpage \"$URL\". Exiting...\n"
    exit 4
fi

# Ping each IP address and conserve the ones responding correctly
declare -a ARRAY_OF_LIVE_HOSTS
for EACH_IP_ADDRESS in "${ARRAY_OF_IP_ADDRESSES[@]}"
do
    # Use a special command if the address format is ipv6
    PING_COMMAND="ping"
    if [[ "$EACH_IP_ADDRESS" =~ ^[0-9a-fA-Z]{4}:.*$ ]]
    then
	PING_COMMAND="ping6"
    fi
    # Ping silently
    $PING_COMMAND -c 1 $EACH_IP_ADDRESS &>/dev/null
    # If the precedent command did not fail, add the address to the live hosts array.
    if (($?))
    then
	:
    else
	ARRAY_OF_LIVE_HOSTS+=("$EACH_IP_ADDRESS")
    fi	
done

# Printing live hosts ip addresses
echo -e "\nList of live hosts present within the webpage \"$URL\":\n"
for EACH_LIVE_HOSTS in "${ARRAY_OF_LIVE_HOSTS[@]}"
do
    echo -e "$EACH_LIVE_HOSTS"
done
echo "" # Esthetic

exit 0

