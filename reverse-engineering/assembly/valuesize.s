.section .text
.globl _start

_start:
	# Move a binary value of into a word register
	# The binary value is composed of two bytes
	# 00000001 : value = 1 / 00000010 : value = 2
	# 00000001 00000010
	movw $0b0000000100000010, %bx

	# Add a binary to the least significant part.
	# So add 1 (first byte) to 2 (last byte) = 3
	# So now the binary value is :
	# 00000001 00000011
	addb %bh, %bl
	
	# Move the value '0' into a binary register of the most significant part.
	# So now the binary value is :
	# 00000000 00000011
	movb $0, %bh

	# Set the result into the '%rdi' register to be returned later during exit.
	# From '%rbx', which includes '%bx'
	movq %rbx, %rdi

	# IMPORTANT : we could not process so by splitting '%rdi' into 8 bits register as such register ('%rdi') does not enable accessing the most significant 8 bits of %di.
	
	# Set the 'exit' syscall (number 60)
	movq $60, %rax
	syscall
	
