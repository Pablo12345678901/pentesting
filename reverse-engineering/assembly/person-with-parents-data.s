	.section .data

	# Data shared with other files
	.globl people, number_of_people
	.globl INDEX_OFFSET, NAME_PTR_OFFSET, WEIGTH_OFFSET, LAST_TWO_DIGITS_PHONE_NUMBER_OFFSET, SHOE_OFFSET
	.globl HAIR_OFFSET, FACEBOOK_FRIENDS_OFFSET, HEIGTH_OFFSET, AGE_OFFSET, FATHER_INDEX_OFFSET, MOTHER_INDEX_OFFSET
	.globl PERSON_RECORD_SIZE
	
	# Define offset each field of people array
	.equ INDEX_OFFSET, 0
	.equ NAME_PTR_OFFSET, 8
	.equ WEIGTH_OFFSET, 16
	.equ LAST_TWO_DIGITS_PHONE_NUMBER_OFFSET, 24
	.equ SHOE_OFFSET, 32
	.equ HAIR_OFFSET, 40
	.equ FACEBOOK_FRIENDS_OFFSET, 48
	.equ HEIGTH_OFFSET, 56
	.equ AGE_OFFSET, 64
	.equ FATHER_INDEX_OFFSET, 72
	.equ MOTHER_INDEX_OFFSET, 80

	# Size of struct
	.equ PERSON_RECORD_SIZE, 88
	
people:
	# Array of people
	# If a person has a parent in the data, its index will be set to its value or 0 if not available.
	# Then to access a parent data, get the address of 'people' (first person) and add the index of the parent -1 (because first index is 1) * PERSON_RECORD_SIZE.
	#     Index
	#        Name
	#                  Weight (US)
	#                       Last two digit of phone number
	#                           Shoe size (US)
	#                               Hair color
	#                                  Number of facebook friends
	#                                      Height (US)
	#                                          Age
	#                                              Father index or 0
	#                                                 Mother index or 0
	.quad 1, gkc_name, 200, 96, 10, 2, 10, 74, 20, 2, 3
	.quad 2, jb_name,  250, 43, 12, 2, 20, 72, 44, 0, 0
	.quad 3, csl_name, 150, 12,  8, 1, 15, 68, 30, 0, 0
	.quad 4, ta_name,  240, 67, 10, 4, 12, 70, 11, 5, 6
	.quad 5, in_name,  253, 24, 10, 4, 13, 70, 11, 0, 0
	.quad 6, gm_name,  255, 33, 11, 5, 56, 69, 65, 0, 0
	
end_people:	

# Pointers on the strings representing the names.
gkc_name:
	.ascii "Gilbert Keith Chester\0"
jb_name:	
	.ascii "Jonathan Bartlett\0"
csl_name:	
	.ascii "Clive Silver Lewis\0"
ta_name:	
	.ascii "Tommy Aquinas\0"
in_name:	
	.ascii "Isaac Newton\0"
gm_name:	
	.ascii "Gregory Mend\0"
	
number_of_people:
	# Compute the number of people from the size of a struct representing one person.
	.quad (end_people - people) / PERSON_RECORD_SIZE

