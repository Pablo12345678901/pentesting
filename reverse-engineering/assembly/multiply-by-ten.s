	# This code contains a single function 'mutliply_by_ten' that multiply any number provided as first argument and return the result.
	# It uses a data 'ten' with value of '10' instead on immediate value '$10' to train referencing the .data section by using the offset from the current instruction pointer.
	# That way, if such function is compiled within a shared library, it will be 'position-independent code' (=PIC).
	.globl multiply_by_ten

	.section .data

ten:
	.quad 10

	.section .text
	
multiply_by_ten:
	# Here, 'ten' is loaded as an offset from the current instruction pointer.
	movq ten(%rip), %rax
	imulq %rdi
	ret

	.section .note.GNU-stack, "", @progbits
