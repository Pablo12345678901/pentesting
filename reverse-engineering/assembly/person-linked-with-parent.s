	# This file has to be linked with 'person-with-parents-data.s' and will return the maximum value of the specific field choosed below (NEED to be (un)commented)).
	# The specific thing is that is returns the maximum value for the field between all the fathers OR mothers (depending on the (un)commented lines).
	# To do so, it will compute the address of the parent (if any) and then check for the maximum value for this parent.
	
	.globl _start
	.section .text
_start:
	# Registers :
	# %rax = used to compute the address of parent record / syscall number at the end.
	# %rbx = address of current record
	# %rcx = loop counter
	# %rdi = biggest value of all parents (father OR mother) specific field
	# %rdx = CANNOT BE USED - as is modified during the multiplication 'mulq'
	# %rsi = value of specific field from parent record
	# %r8 = address of first record - used to compute address of parent record.
	# %r9 = person record size - used to compute addrress of parent record

	# Load address of first record for loop - this value will be modified alongside the program.
	leaq people, %rbx
	# Load it again into another register that will NOT be modified in order to compute address from it.
	leaq people, %r8

	# Load the value of a '.globl' person record size.
	leaq PERSON_RECORD_SIZE, %r9

	# Get record count to loop on it.
	movq number_of_people, %rcx

	# Set default biggest value found to the minimum existing in the range 0-255.
	movq $0, %rdi

	# Exit if there is no record
	cmpq $0, %rcx
	je end_of_program

main_loop:
	# Check if current person has no father OR mother (depending on the (un)commented line) =  if the value of the father field is 0 -> if so, get next person data.
	movq FATHER_INDEX_OFFSET(%rbx), %rax
	#movq MOTHER_INDEX_OFFSET(%rbx), %rax
	cmpq $0, %rax
	je end_loop

	# Else, get the father/mother address.
	# Decrease the index of the person searched as first person start at index '1' (and not '0').
	decq %rax
	# Then multiply by the size of one person to get the offset (offset that will help to get the father/mother address).
	mulq %r9
	# Increase the offset by the address of the first person to obtain the address of the wished father/mother.
	addq %r8, %rax

	# Depending on the (un)commented line(s), the maximum of the specific field will be returned.	
	# The field 'NAME_OFFSET' has no sence to check for maximum values on string so it is not proposed here as a field to be returned.
	#movq WEIGTH_OFFSET(%rax), %rsi
	#movq LAST_TWO_DIGITS_PHONE_NUMBER_OFFSET(%rax), %rsi
	#movq SHOE_OFFSET(%rax), %rsi
	movq HAIR_OFFSET(%rax), %rsi
	#movq FACEBOOK_FRIENDS_OFFSET(%rax), %rsi
	#movq HEIGTH_OFFSET(%rax), %rsi
	#movq AGE_OFFSET(%rax), %rsi

	# If it is less or equal than current maximum, get to next value - if any.
	cmpq %rdi, %rsi
	jbe end_loop
	
	# Else adapt the current maximum.
	movq %rsi, %rdi

end_loop:
	# Get the address of next person by adding the size of one person to the address of the struct.
	addq $PERSON_RECORD_SIZE, %rbx
	loopq main_loop
	
end_of_program:
	# Exit syscall
	movq $60, %rax
	syscall
