# This program aims to reproduce exponent computation as : 2 ^ 5 = 32
.globl _start

# This section was added to separate the data of the program
# Adapt data here to compute with other numbers
# WARNING : result has to be between 0-255, if it is up, it will cause overflow and garbage value will be returned instead as it only consider 8 last bits.	
.section .data
base:
	.quad 4
exponent:
	.quad 3
	
.section .text
_start:
	# '%rbx' holds the base
	movq base, %rbx

	# '%rcx' holds the current exponent count
	movq exponent, %rcx

	# Store the accumulate value into '%rax'
	# By the way, set default result to '1' as it equals all base with exponent '0'.
	# Example : (10000 ^ 0 = 1) -> everything power '0' will always be '1'.
	movq $1, %rax

	# 'cmp' compare two things
	cmp $0, %rcx
	# If last comparison is equal (0 = '%rcx'), so jump to 'complete'
	je complete

mainloop:
	# Multiply current result (held in '%rax') by the base
	mulq %rbx
	# %rax = %rbx * %rax

	# 'loopq' does two things in one : decrease rcx
	# and then, only if not '%rcx = 0', jump
	loopq mainloop
	
complete:
	# Save the exit return code value from '%rax' to '%rdi'
	movq %rax, %rdi

	# Set the exit system call (60)
	movq $60, %rax
	syscall
