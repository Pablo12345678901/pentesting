	# This program use an indirect jump with the instruction 'jmp *target_pointer'.
	# It also use the '.lcomm' directive to define the name of the symbol representing such pointer within the '.bss' section.
	# Its address can be used to modify its content from the 'symbol' name.
	.globl _start	

	.section .bss
	.lcomm target_pointer, 8
		
	.section .text

current_target:
	# The jump 'jmp target_pointer' will arrive here.
	# Set another value to %rdi
	movq $0, %rdi
	jmp end_of_program

_start:
	# Set default value of %rdi
	movq $1, %rdi
	
	# Set the 'target_pointer' to the address of the 'current_target' memory location.
	# If the below 'movq' line is commented, an error will occurs as a jump to the '0' address cannot be processed :
	#	Segmentation fault
	#	139
	movq $current_target, target_pointer

	# This indirect jump will jump to the above code section.
	jmp *target_pointer

	# The line below will never be reached
	jmp end_of_program

end_of_program:	
	# Syscall 'exit' 60
	movq $60, %rax
	syscall
