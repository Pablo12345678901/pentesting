.globl _start  
.section .text

_start: 
	# Using other registers (than '%rax') to conserve intermediary results to train.
	
	########################################
	# REMINDER :
	#
	#	- movb =  8 bit-chuncks (1 byte)
	# 	- movw = 16 bit-chuncks (2 byte)
	#	- movl = 32 bit-chuncks (4 byte)
	# 	- movq = 64 bit-chuncks (8 byte)
	#
	########################################

	# BYTES
	# '%rbx' will be used as an initial 'stack'
	movb $3, %bl
	# '%rbx' = 3

	# WORDS
	# Conserving '3' into '%rcx'
	addw %bx, %cx # '%rcx' will be used later with '3'
	# '%rcx' = 3

	# DOUBLE-WORDS
	# Doubling the last 8 bits from '%rbx'
	# 3 + 3 = 6
	addl %ebx, %ebx
	# '%rbx' = 6

	# BYTES
	# 6 ('%rbx') on the '%rax' register by adding it from '%rbx'
	addb %bl, %al
	# '%rax' = 6

	# THIS OPERATION NEED '%RAX'
	# DOUBLE-WORDS
	# Multiply 3 ('%rcx') by 6 ('%rax') -> 3 * 6 = 18
	mull %ecx
	# '%rax' = 18

	# WORDS
	# Reloading the intermediary result from 'accumulator' ('%rax') register into %rcx.
	movw %ax, %cx
	# '%rax' = 0
	# '%rcx' = 18

	# BYTES
	# Using another register - just for fun
	movb $2, %bl
	# '%rbx' = 2

	# QUADWORDS
	# Adding 8 last bits of '%rbx' to the ones of '%rcx'
	# So 18 + 2 = 20
	addq %rbx, %rcx
	# '%rcx' = 20

	# DOUBLE-WORDS
	# Loading the 8 last bits of '%rdx'
	movl $4, %edx
	# '%rdx' = 4

	# BYTES
	# Recovering again another intermediary result.
	movb %cl, %al
	# '%rax' = 20
	# '%rcx' = 0

	# THIS OPERATION NEEDS '%RAX'
	# WORDS
	# Multiply 4 ('%rdx') * 20 ('%rax')
	mulw %dx
	# '%rax' = 80

	# DOUBLE-WORDS
	# Reloading the intermediary result from 'accumulator' ('%rax') register into %rcx.
	movl %eax, %ecx
	# '%rax' = 0
	# '%rcx' = 80

	# BYTES
	# Adding 20 -> up to a hundred	
	addb $20, %cl
	# '%rcx' = 100

	# WORDS
	# Recovering again another intermediary result.
	movw %cx, %ax
	# '%rax' = 100
	# '%rcx' = 0

	# QUADWORDS
	# Set the return value (%rdi) of next call to the '%rax' value (=80).
	movq %rax, %rdi 

	# Set the exit (=60) system call number (=%rax)
	movq $60, %rax

	# Call 'exit' with return value of '%rdi'
	syscall

