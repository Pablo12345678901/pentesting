	.globl _start
	.section .data

number_of_numbers:
	.quad 3
	
numbers_to_multiply:
	# Set here the numbers to multiply.
	.quad 3, 3, 3 
	
.section .text
_start:	
	# The number of elements is taken.
	addq number_of_numbers, %rbx
	
	# If it is lower or equal to 1, -> exit with error.
	cmp $1, %rbx
	jbe exit_with_error

	# Get the address of first element
	movq $numbers_to_multiply, %rdi

	# Get the first number
	movq (%rdi), %rdx

	# Comparison with '0'
	cmp $0, %rdx

	# Check if if it zero -> exit 0
	je exit_with_zero_status
	
	# Check if it is below zero -> exit error 1
	jb exit_with_error
	
	# Decrease of 1 the counter of elements remaining
	subq $1, %rbx
	# If the number of elements is now '0' -> exit with error as a multiplication requires at least two elements.
	jz exit_with_error
	
big_loop:
	# Move the 'index cursor' to next element by adding to it 8 (bytes, for a quadword).
	addq $8, %rdi
	
	# The current number is taken as the counter '%rcx' from the content of memory address held within '%rdi'
	movq (%rdi), %rcx

	# Compare '%rcx' with '0'.
	cmp $0, %rcx
	
	# If it is equal to '0' -> set result to 0 and exit.
	je exit_with_zero_status
	
	# If it is lower than '0' -> exit with error code.
	jb exit_with_error

	jmp little_loop
	
little_loop:	
	# 'loopq' : While the counter is above 0, add the value to the final result.
	addq %rdx, %rax
	loopq little_loop
	
	# After looping until '%rcx' is zero, decrementing the number of elements remaining.
	subq $1, %rbx

	# If the number of elements is now '0' -> exit with error as a multiplication requires at least two elements.
	jz end_of_program
	
	# Else return (jump) to big_loop but before, set the new temporary result
	jnz set_temporary_result

set_temporary_result:
	movq %rax, %rdx
	jmp big_loop	
	
exit_with_error:	
	# Set exit ERROR return value = 1
	movq $1, %rdi
	# Exit system call (60)
	movq $60, %rax
	syscall

exit_with_zero_status:
	# Set exit 0 return code.
	movq $0, %rdi
	# Exit system call (60)
	movq $60, %rax
	syscall
	
end_of_program:
	# Set exit return value
	movq %rax, %rdi
	# Exit system call (60)
	movq $60, %rax
	syscall
	
