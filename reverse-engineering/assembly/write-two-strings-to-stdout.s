	.globl _start

	.section .data

first_string:
	.ascii "This is my first  string\n"
first_string_end:

second_string:
	.ascii "This is my second string\n"
second_string_end:
	
	# Set the length of the data to be written as the difference between data start and data end.
	.equ first_string_length, first_string_end - first_string
	.equ second_string_length, second_string_end - second_string
	
	.section .text
_start:

write_first_string:
	# Set syscall to 'write' (=1)
	movq $1, %rax
	# Set 'file descriptor' to STDOUT (=1)
	movq $1, %rdi
	# Load address of string
	leaq first_string, %rsi
	# Set the length of the string to be written
	leaq first_string_length, %rdx
	syscall
	# Set syscall to 'write' (=1)
	movq $1, %rax
	# Set 'file descriptor' to STDOUT (=1)
	movq $1, %rdi

write_second_string:
	# Set syscall to 'write' (=1)
	movq $1, %rax
	# Set 'file descriptor' to STDOUT (=1)
	movq $1, %rdi
	# Load address of string
	leaq second_string, %rsi
	# Set the length of the string to be written
	leaq second_string_length, %rdx
	syscall

end:
	# Syscall exit
	xor %rdi, %rdi
	movq $60, %rax
	syscall
