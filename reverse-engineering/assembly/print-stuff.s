	# This code contains one function that calls 'fprintf' from the standard C library.
	# It is written in an 'position-independent code' manner and to do so uses the 'PC-relative addressing' mode as well as the 'PLT/GOT' mechanism.
	.globl print_stuff

	.section .data
my_message:
	.ascii "\nHello, world !\n\0"
	
	.section .text

print_stuff:
	# The 'enter' instruction is needed as another function will be called - to ensure that stack is aligned.
	enter $0, $0

	# Set %rdi to 'stdout' external symbol.
	movq stdout@GOTPCREL(%rip), %rdi
	movq (%rdi), %rdi
	
	# PC-relative addressing of the symbol.
	leaq my_message(%rip), %rsi

	# No floating-point argument provided to variadic function.
	movq $0, %rax
	# 'PLT/GOT' mecanism.
	call fprintf@plt
	
	leave
	ret
