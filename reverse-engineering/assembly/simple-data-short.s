# Notice that the computation here is basic A + B = C but put C into B.
# But by the same way, it sets 'exit' return code '%rdi'
# It is quite elegant even if simple.
	
	.globl _start
	
	.section .data

first_value:
	.quad 3
second_value:	
	.quad 11
	
	.section .text
_start:
	# As movq only support one address maximum in its arguments,
	# movq ARG1, ARG2 => Either ARG1 or ARG2 can be a memory location but not both.
	# So we can not manipulate data without at least one register.
	movq first_value, %rdi
	addq second_value, %rdi

	# Exit system call
	movq $60, %rax
	syscall
