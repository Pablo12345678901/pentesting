	.globl _start

	# Memory section	
	.section .data

# Set values by precising size in memory (below : '.byte') and value ('4).
# Each value has different type to force customizing the expression in the '.text' section.
first_value:
	.byte 1
second_value:
	.word 3
third_value:
	.long 4
final_result:
	.quad 0

# Main program
.section .text

_start:
	# Since here, each operation will be executed in a different type
	# than the one before and after (if any) (except exit syscall).
	
	# Loading memory values into registers for further processing
	# Playing with operations of different types.
	movb first_value, %bl # '%rbx' 
	movw second_value, %cx # '%rcx'
	movl third_value, %edx # '%rdx'

	# Basic computation (2 addition to get A + B + C = D -> D will be returned as the return code of exit
	addb %bl, %cl
	# '%rcx' = 1 + 3 = 4
	addw %dx, %cx
	# '%rcx' = 4 + 6 = 10
	
	# Store the value in memory
	movl %ecx, final_result

	# Exit syscall
	movq final_result, %rdi
	movb $60, %al # '%rax'
	syscall
