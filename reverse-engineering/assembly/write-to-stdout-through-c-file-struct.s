	# It write output to 'stdout' by using the 'FILE' structs created by C standard library.
	# No need to neither open (with 'fopen') nor close (with 'fclose') such pointers, as the library does it automatically.
	# No need to conserve a variable on the stack containing the pointer to 'FILE' struct as it can be called with 'stdout' directly.
	# The stack is used to push and retrieve the value of the 'fprintf' sixth arguments.
	# This program have to be linked with the 'stardard C library'.
	.globl main

	.section .data

format_string_1:
	.ascii "My name is %s and I am %d years old.\n\0" # Does not work.
my_name:
	.ascii "Rambo Sanchez\0"
my_age:
	.quad 100
	
format_string_2:
	# 'fprintf' will use :
	# - %rdi ('FILE' struct)
	# - %rsi (format string)
	# - 6 variables
	# = total of 8 variables, among them two on the stack.
	.ascii "The favorite numbers of %s and %s are %d, %d, %d and %d.\n\0" 
name_1:
	.ascii "Jack\0"
name_2:	
	.ascii "Pack\0"
favorite_number_1:
	.quad 12
favorite_number_2:
	.quad 24
favorite_number_3:
	.quad 36
favorite_number_4:
	.quad 48
	
	.section .text
main:
	# Parameters of 'fprintf' :
	# %rdi = pointer to 'FILE' struct
	# %rsi = format string
	# ...  = variables to be replaced within the format string
	movq stdout, %rdi
	leaq format_string_1, %rsi
	leaq my_name, %rdx
	# As the age is a quad, its value and not a pointer to its value is needed.
	# Therefore, 'movq' is used instead of 'leaq'.
	movq my_age, %rcx
	# Set %rax to '0' for the 'fprintf' variadic function as there are no floating-point number used here.
	movq $0, %rax
	# Write to file
	call fprintf

	movq stdout, %rdi
	leaq format_string_2, %rsi
	leaq name_1, %rdx
	leaq name_2, %rcx
	movq favorite_number_1, %r8
	movq favorite_number_2, %r9
	# So far the 6 function arguments have been defined.
	# Therefore, the next ones will be pushed on the stack.
	# Push on the stack the third favorite number.
	pushq favorite_number_4
	# Push on the stack the third favorite number.
	# This has to be after pushing the forth number as stack will be used to obtained additional arguments in reverse order (LIFO).
	pushq favorite_number_3

	# Set %rax to '0' for the 'fprintf' variadic function as there are no floating-point number used here.
	movq $0, %rax
	# Write to file
	call fprintf

	# Retrieve the two values pushed on the stack to re-set it to its initial state
	popq %rdi
	popq %rdi

	# Set return exit code to '0'.
	movq $0, %rax
	
	ret
