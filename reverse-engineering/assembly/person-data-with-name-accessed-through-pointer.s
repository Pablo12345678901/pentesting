	.section .data

	# Data shared with other files
	.globl people, people_number
	.globl NAME_PTR_OFFSET, WEIGTH_OFFSET, SHOE_OFFSET, HAIR_OFFSET, HEIGTH_OFFSET, AGE_OFFSET
	.globl PERSON_RECORD_SIZE

	# Access each char of the name with the general addressing mode :
	# 	VALUE(BASEREG, INDREG, MULTIPLIER) = NAME_OFFSET(%rbx, %rcx, 1)
	#	Here :
	#		- %rbx is the address of the current person structure
	#		- %rcx held the index of the char to get.
	#		- The multiplier was set to '1' (because it moves 1 byte at the time).
	
	# Define offset each field of people array
	.equ NAME_PTR_OFFSET, 0 # The address contained within the pointer is a quadword (8 bytes).
	.equ WEIGTH_OFFSET, 8
	.equ SHOE_OFFSET, 16
	.equ HAIR_OFFSET, 24
	.equ HEIGTH_OFFSET, 32
	.equ AGE_OFFSET, 40
	# Set the size of the struct being at the end of the last field (quadword size) so : 40 + 8 = 48
	.equ PERSON_RECORD_SIZE, 48
	
people:
	# Array of people
	# Name (pointer on name address), weigth, shoe size, hair color (equivalence in number), height, age.
	# Those values corresponds to american weight, shoe size and heigth units.
	.quad $gkc_name, 200, 10, 2, 74, 20
	.quad $jb_name, 280, 12, 2, 72, 44
	.quad $csl_name, 150, 8, 1, 68, 30
	.quad $ta_name, 250, 10, 4, 70, 11
	.quad $in_name, 250, 10, 4, 70, 11
	.quad $gm_name, 180, 11, 5, 69, 65
end_people:	

# Pointers on the strings representing the names.
gkc_name:	
	.ascii "Gilbert Keith Chester\0"
jb_name:	
	.ascii "Jonathan Bartlett\0"
csl_name:	
	.ascii "Clive Silver Lewis\0"
ta_name:	
	.ascii "Tommy Aquinas\0"
in_name:	
	.ascii "Isaac Newton\0"
gm_name:	
	.ascii "Gregory Mend\0"
	
people_number:
	# Compute the number of people from the size of a struct representing one person.
	.quad (end_people - people) / PERSON_RECORD_SIZE

	



