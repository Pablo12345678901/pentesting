.section .text
.globl _start

_start:

	# BYTES
	# 255 in binary : '11111111' is the max value available (values : 0-255)
	movb $0b11111111, %al
	# '%rax' = 255

	# WORDS
	# Provoking overflow (255 + 1 ) -> getting 0
	addw $0b00000001, %ax
	# '%rax' = 255 + 1 = 0 ?! -> overflow

	# DOUBLE-WORDS
	# To prove overflow, you can comment precedent or next line
	subl $0b00000001, %eax
	# '%rax' = 0 - 1 = 255 ?! -> similar as above
	# Re-set to original state = 255

	# BYTES
	# Getting from 255 to 33 so adding 34 -> 255 + 1 (= 0) + 33 = 33
	addb $0b00100010 , %al

	# WORDS
	# Collecting '%rax' = as exit code but from 'word' (16 bits)
	movw %ax, %di

	# BYTES
	# Setting 'exit' syscall (60)
	# But writing in it binary
	movb $0b00111100, %al
	syscall
