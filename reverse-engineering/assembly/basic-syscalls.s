# Run command :
# PROGRAM=NAME-OF-THIS-PROGRAM; as "$PROGRAM".s -o "$PROGRAM".o && ld "$PROGRAM".o -o "$PROGRAM" && ./"$PROGRAM" ; echo $?  && rm -rf "$PROGRAM".o "$PROGRAM" ; 

.section .data
    msg: .ascii "Please type (anything followed by) enter to continue the program...\n-> "
    msg_len = . - msg
    filename: .ascii "output.txt\0"
content: .ascii "\n\t\"This is the content that will be written into the file.\" \n\nEnjoy configuring this\nlow level setting\nwhile training\nlow level assembly code.\n\n"
    content_len = . - content
    numbers: .quad 1, 2, 3, 4, 5

.section .bss
    .lcomm buffer, 64

.section .text
.global _start

_start:
    # Hello World
    movq $1, %rax                        # %rax = 1 = sys_write
    movq $1, %rdi                        # %rdi = file descriptor (1=stdout) (first argument of sys_write)
    movq $msg, %rsi                      # %rsi = message to write (second argument of sys_write) - see above
    movq $msg_len, %rdx                  # %rdx message length (third argument of sys_write) - see above
    syscall
    #########################################

    # Arithmetic Operations: Adding Numbers
    movq $5, %rax                        # Load 5 into rax
    addq $3, %rax                        # Add 3 to rax (rax now contains 8)
    #########################################

    # Conditional Statements and Loops: Loop to Sum Numbers
    movq $5, %rcx                        # Counter set to 5
    xorq %rbx, %rbx                      # Clear rbx (sum)

sum_loop:
    addq %rcx, %rbx                      # Add counter to sum
    loop sum_loop                        # Decrement rcx and loop if not zero
    #########################################

    # Working with Memory: Array Sum
    leaq numbers(%rip), %rsi             # Load address of numbers array into rsi
    movq $5, %rcx                        # Set counter to 5
    xorq %rax, %rax                      # Clear rax (sum)

array_sum_loop:
    addq (%rsi), %rax                    # Add value at rsi to rax
    addq $8, %rsi                        # Move to the next element (8 bytes for quad)
    loop array_sum_loop                  # Decrement rcx and loop if not zero
    #########################################

    # System Calls: Reading Input
    movq $0, %rax                        # sys_read system call
    movq $0, %rdi                        # file descriptor (stdin)
    leaq buffer(%rip), %rsi              # buffer to store input
    movq $64, %rdx                       # number of bytes to read
    syscall
    #########################################

    # File Operations: Writing to a File
    # Open
    movq $2, %rax                        # %rax = 2 = sys_open
    leaq filename(%rip), %rdi            # %rdi = filename to open (first argument)
    movq $65, %rsi                       # %rsi = O_CREAT | O_WRONLY (second argument)
    movq $0644, %rdx                     # %rdx = file permissions (third argument)
    syscall	
    movq %rax, %rdi                      # file descriptor returned by sys_open
    # Write 
    movq $1, %rax                        # %rax = 1 = sys_write
    leaq content(%rip), %rsi             # content to write
    movq $content_len, %rdx              # content length
    syscall
    # Close
    movq $3, %rax                        # %rax = 3 = sys_close
    syscall
    #########################################

    # Exit
    movq $60, %rax                       # %rax = 60 = sys_exit
    xorq %rdi, %rdi                      # exit code 0
    syscall

