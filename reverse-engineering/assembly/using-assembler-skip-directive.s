	# This program use an indirect jump with the instruction 'jmp *target_pointer'.
	# It also use the '.skip' directive to replace such pointer initial value (as it does not matter) within the '.bss' section.
	.globl _start	

	.section .bss
	
target_pointer:
	# Set to '0' the target pointer.
	# In 'C', this is equivalent to set it to the null pointer.
	.skip 8, 0 # Reserve 8 bytes in memory and fill them with the '0' value.
	
	.section .text

current_target:
	# The jump 'jmp target_pointer' will arrive here.
	# Set another value to %rdi
	movq $0, %rdi
	jmp end_of_program

_start:
	# Set default value of %rdi
	movq $1, %rdi
	
	# Set the 'target_pointer' to the address of the 'current_target' memory location.
	# If the below 'movq' line is commented, an error will occurs as a jump to the '0' address cannot be processed :
	#	Segmentation fault
	#	139
	movq $current_target, target_pointer

	# This indirect jump will jump to the above code section.
	jmp *target_pointer

	# The line below will never be reached
	jmp end_of_program

end_of_program:	
	# Syscall 'exit' 60
	movq $60, %rax
	syscall
