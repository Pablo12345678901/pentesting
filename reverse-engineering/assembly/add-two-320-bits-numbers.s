	# This program will add two 320 bits (= 5 * 64 bits) register number and save the value within the registers combination :
	#   %r8:%r9:%r10:%r11:%r12
	# + %rax:%rbx:%rcx:%rdx:%rsi
	#___________________________
	# = %rax:%rbx:%rcx:%rdx:%rsi
	# As this value is 320 bits is too big to be returned, a debugguer is needed to check all 5 results value.
	# The exit return code will be help within '%rdi' but does not mean anything per se as it only represent the least significant 64 bits of the result.

	# Enhancements :
	# - Same with two signed values
	#	-> How to manage several 64 bits registers considering that the most significant bit of the most significant register can change the value of other registers.
	#	-> What is the impact ?
	# - Use %rdi to return the overflow ('1') or '0' if no overflow occured.
	
	.globl _start
	.section .text
_start:

	# Set all registers.
	# FIRST NUMBER REGISTERS (DEST)
	#movq $0b1111111111111111111111111111111111111111111111111111111111111111, %rax
	#movq $0b1111111111111111111111111111111111111111111111111111111111111111, %rbx
	#movq $0b1111111111111111111111111111111111111111111111111111111111111111, %rcx
	# DEBUG : start with the two least significant register to perform tests. If it works with two 64 bits registers, it will works with 5 too.
	movq $0b1111111111111111111111111111111111111111111111111111111111111111, %rdx
	movq $0b1111111111111111111111111111111111111111111111111111111111111111, %rsi
	# SECOND NUMBER REGISTERS (SOURCE)
	#movq $0b0000000000000000000000000000000000000000000000000000000000000000, %r8
	#movq $0b0000000000000000000000000000000000000000000000000000000000000000, %r9
	#movq $0b0000000000000000000000000000000000000000000000000000000000000000, %r10
	movq $0b0000000000000000000000000000000000000000000000000000000000000000, %r11
	movq $0b0000000000000000000000000000000000000000000000000000000000000000, %r12

	# Add the two least significant ones.
	addq %r12, %rsi
	
	# Add with carry all pairs of 64 bits registers starting from the least significant ones.
	adcq %r11, %rdx
	# DEBUG : start with the two least significant register to perform tests. If it works with two 64 bits registers, it will works with 5 too.
	#adcq %r10, %rcx
	#adcq %r9, %rbx
	#adcq %r8, %rax
	
end_of_program:
	# Set exit return code
	movq %rsi, %rdi
	# Exit syscall
	movq $60, %rax
	syscall
