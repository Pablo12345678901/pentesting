	.globl _start

	.section .data

source:
	# Source array
	.quad 9, 23, 55, 1, 3
dest:
	# Destination array
	.quad 0, 0, 0, 0, 0

	.section .text
	
_start:
	# Set source and destination registers to the address of first element of both arrays.
	movq $source, %rsi
	movq $dest, %rdi
	
	# Set the counter for repetition 'rep'
	movq $3, %rcx # To copy only the first three array index contents.
	#movq $5, %rcx # To copy all array.

	# Get first value of array within a register to check with a debugger
	movq (%rsi), %rbx
	
	# Copy (move) data from source to destination array %rcx number of times.
	rep movsq

	# Get next value of array within a register to check with a debugger where the copy stopped.
	# WARNING : if the above counter of repetition %rcx was set to the exact number of value, gargage value will be seen (as the register has an out of array address) IF NOT reaching a 'Segmentation fault' error.
	movq (%rsi), %rbx
	
finish:
	# Set exit return code to '0'
	xorq %rdi, %rdi
	# Exit syscall
	movq $60, %rax
	syscall
	
