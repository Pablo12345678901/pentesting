	.section .data

	# Data shared with other files
	.globl people, people_number
	.globl NAME_OFFSET, WEIGTH_OFFSET, SHOE_OFFSET, HAIR_OFFSET, HEIGTH_OFFSET, AGE_OFFSET
	.globl PERSON_RECORD_SIZE

	# Access each char of the name with the general addressing mode :
	# 	VALUE(BASEREG, INDREG, MULTIPLIER) = NAME_OFFSET(%rbx, %rcx, 1)
	#	Here :
	#		- %rbx is the address of the current person structure
	#		- %rcx held the index of the char to get.
	#		- The multiplier was set to '1' (because it moves 1 byte at the time).
	
	# Define offset each field of people array
	.equ NAME_OFFSET, 0
	.equ WEIGTH_OFFSET, 32
	.equ SHOE_OFFSET, 40
	.equ HAIR_OFFSET, 48
	.equ HEIGTH_OFFSET, 56
	.equ AGE_OFFSET, 64
	# Set the size of the struct being at the end of the last field (quadword size) so : 64 + 8 = 72
	.equ PERSON_RECORD_SIZE, 72
	
people:
	# Array of people
	# Name (string of max 31 char + 1 null char), weigth, shoe size, hair color (equivalence in number), height, age.
	# Those values corresponds to american weight, shoe size and heigth units.
	.ascii "Gilbert Keith Chester\0"
	.quad 200, 10, 2, 74, 20
	
	.ascii "Jonathan Bartlett\0"
	.quad 280, 12, 2, 72, 44
	
	.ascii "Clive Silver Lewis\0"
	.quad 150, 8, 1, 68, 30
	
	.ascii "Tommy Aquinas\0"
	.quad 250, 10, 4, 70, 11
	
	.ascii "Isaac Newton/0"
	.quad 250, 10, 4, 70, 11
	
	.ascii "Gregory Mend\0"
	.quad 180, 11, 5, 69, 65
end_people:	

people_number:
	# Compute the number of people from the size of a struct representing one person.
	.quad (end_people - people) / PERSON_RECORD_SIZE

	



