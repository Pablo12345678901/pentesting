	# This program combine several bitmask with an 'or' with the '|' symbol.
	# Then it compares a number ('number_to_test') to check whether at least one of the bit of the bitmask was found within it.
	# It returns '1' if so and exit.
	# Else it will check for a last bitmask to see if the latter was within the number.
	# Here, the bitmask represents language(s) spoken...
	# Will the number speak one latin language (french, spanish or italian) and return and exit code of '1' ?
	# Or will this number speak English only and return an exit code of '8' ?
	# Or will this number speak no language between those 4 and return an exit code of '0' (default) ?
	# It is easily possible to (un)comment line(s) within the 'number_to_test' section to check return value of the program with different test values.
	
	.globl _start	

	.section .data
	
.equ KNOWS_FRENCH, 0b1 		# bitmask = 1
.equ KNOWS_SPANISH, 0b10	# bitmask = 2
.equ KNOWS_ITALIAN, 0b100	# bitmask = 4
.equ KNOWS_ENGLISH, 0b1000 	# bitmask = 8
	
number_to_test:
	# uncomment one line and comment the others to test program.
	#.quad 0		# in binary : 0 0 0 0 0 0 0 0
	#.quad 12	# in binary : 0 0 0 0 1 1 0 0
	.quad 24	# in binary : 0 0 0 1 1 0 0 0
	#.quad 127 	# in binary : 0 1 1 1 1 1 1 1
	
	.section .text

_start:
	# Set default values to '0' with an elegant (efficient) 'xor'.
	xorq %rax, %rax
	xorq %rdi, %rdi

	# Set %rax to a bitmasks combination of three bitmasks.
	movq $(KNOWS_FRENCH | KNOWS_SPANISH | KNOWS_ITALIAN) , %rax

	# Check whethere at least one latin language (French, Spanish, Italian) is spoken (if the 'and' resulted in non-zero).
	testq %rax, number_to_test
	jnz speaks_at_least_one_latin_language
	# Else if no latin language is spoken, test whether at least English is spoken.
	jz test_whether_speak_english

speaks_at_least_one_latin_language:
	# Set exit code to '1' if at least one latin language is spoken.
	movq $1, %rdi
	jmp end_of_program

test_whether_speak_english:
	# Test whether the 'KNOWS_ENGLISH' bitmask is set and jump depending on it.
	testq $KNOWS_ENGLISH, number_to_test
	jnz speaks_english
	jmp end_of_program

speaks_english:
	# Set the exit return code to 'KNOWS_ENGLISH'.
	movq $KNOWS_ENGLISH, %rdi
	jmp end_of_program
	
end_of_program:	
	# Exit syscall
	movq $60, %rax
	syscall
