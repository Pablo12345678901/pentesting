	# 'AND' each number of an array with a bitmask initially set to '1...1' and that will be updated with 'set/unset' bits.
	# The final result will be returned as the exit return code of the program.
	.globl _start	

	.section .data

array_size:
	# Adapt here the array size if required (if wanted to test array of more than 3 numbers).
	.quad 3
	
array_of_numbers:
	# uncomment one line and comment the others to test program.
	#.byte 0, 1, 255	# Common bits : 0 0 0 0 0 0 0 0 =  0 
	#.byte 12, 24, 187	# Common bits : 0 0 0 0 1 0 0 0 =  8  
	#.byte 24, 187, 191	# Common bits : 0 0 0 1 1 0 0 0 = 24
	.byte 33, 105, 181	# Common bits : 0 0 1 0 0 0 0 1 = 33
	
# Binary to decimal equivalence :
# 0 0 0 0 0 0 0 0	= 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 0 * 2^0 =   0
# 0 0 0 0 1 1 0 0	= 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 0 * 2^0 =  12
# 0 0 0 1 1 0 0 0 	= 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 0 * 2^0 =  24
# 0 0 1 0 0 0 0 1 	= 0 * 2^7 + 0 * 2^6 + 1 * 2^5 + 0 * 2^4 + 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 =  33
# 0 1 1 0 1 0 0 1 	= 0 * 2^7 + 1 * 2^6 + 1 * 2^5 + 0 * 2^4 + 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 105
# 1 0 1 1 0 1 0 1 	= 1 * 2^7 + 0 * 2^6 + 1 * 2^5 + 1 * 2^4 + 0 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 181
# 0 1 1 1 1 0 1 1	= 0 * 2^7 + 1 * 2^6 + 1 * 2^5 + 1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = 187
# 0 1 1 1 1 1 1 1	= 0 * 2^7 + 1 * 2^6 + 1 * 2^5 + 1 * 2^4 + 1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0 = 191

	.section .text

_start:
	# Load the address of first array element.
	leaq array_of_numbers, %rdi

	# Set array size
	movq array_size, %rcx

	# Set default returned value to one byte containing '1...1'
	movb $-1, %dl
	
main_loop:	
	# Get current element
	movb (%rdi), %al

	# Compare the current number with current result in an 'AND' test to unset all unset bits and keep set bits.
	andb %al, %dl

	# Increase the current address by one byte
	incq %rdi
	loopq main_loop
	
finish:		
	# Set the result as the exit return code
	movq %rdx, %rdi
	movq $60, %rax
	syscall
