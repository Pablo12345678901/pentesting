	# This simple program calls a function 'print_stuff' obtained from a shared library.
	# It opens such library and obtain the symbol 'print_stuff' manually from the assembly code.
	# This file uses 'dlopen' and 'dlsym' to open the shared library and load the symbol 'print_stuff' from it so it has to be built against the library 'libdl.so' by providing the option '-ldl' to 'gcc' within the building command.
	# IMPORTANT : the library filename has to be available from the loader so setting the environment variable 'LD_LIBRARY_PATH' with the command 'export LD_LIBRARY_PATH=LIBRARY_DIRECTORY_TO_ADAPT' BEFORE building this file is mandatory in order that the loader can find such library.
	.globl main

#----------------------------------------------------------------------
	
	.section .data

shared_library_filename:
	# Adapt here the name of the shared library containing the searched function.
	.ascii "libprint-stuff.so\0"

searched_function_name:
	.ascii "print_stuff\0"

#----------------------------------------------------------------------
	
	.section .text

main:
	# Ensure stack alignment as external function are called
	enter $0, $0

	# Open shared library
	leaq shared_library_filename, %rdi
	movq $1, %rsi # $1 = lazy-loading flag
	call dlopen

	# Get symbol
	movq %rax, %rdi
	leaq searched_function_name, %rsi
	call dlsym

	# Use symbol
	# Call the function obtained from the symbol in an indirect way.
	call *%rax

	# Set the return code of 'main' to '0'.
	xor %rax, %rax
	
	leave
	ret

#----------------------------------------------------------------------
	
	# Set non-executable stack ("") that contains program data "@progbits"
	.section .note.GNU-stack, "", @progbits
