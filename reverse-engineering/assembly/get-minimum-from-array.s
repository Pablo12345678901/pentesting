	.globl _start

	.section .data

number_of_numbers:
	.quad 7
	
list_of_numbers:
	.quad 200, 20, 33, 80, 52, 10, 11
	
	.section .text
_start:
	# Registers used :
	# %rax : current index content value - and at the end, replaced by the syscall number.
	# %rcx : currennt index AND loop counter
	# %rdi : current result and exit return code

	# Set the first index explored (last index + 1)
	movq number_of_numbers, %rcx

	# Set default minimum to maximum value of the range (0-255).
	movq $255, %rdi

	cmp $0, %rcx
	je end_of_program

main_loop:
	# Get current value but start with an offset of '-8' to ensure that only index 0 to X (array max index) and not 1 to X+1 are explored as %rcx start at the number of elements which is also index max+1.
	movq list_of_numbers-8(, %rcx, 8), %rax

	# Compare current value with the current maximum
	cmp %rdi, %rax

	# If it is below or equal - no need to care more about it.
	ja loop_control
	# Else, update current maximum value
	movq %rax, %rdi

loop_control:	
	# Check if still index to check (%rcx > 0) and if so - compare indexed value with current maximum.
	loopq main_loop

end_of_program:
	movq $60, %rax
	syscall
