# This file has to be assembled first, and then, the object produced has to be linked with 'person-data-with-name-accessed-through-pointer.o' (.s, then assembled, then linked).
# Please notice that a few section names were added to facilitate reading the code - even if it would not be necessary.	

	.globl _start
	.section .text

_start:
	# Registers used :
	# %rax = length of current person name
	# %rbx = address of current person struct
	# %rcx = loop counter
	# %rdi = maximum length of (all) names (space(s) not counted)
	# %rdx = current char value
	# %rsi = address of current char
	
	# Load address of first record
	leaq people, %rbx
	
	# Get record count to loop on it.
	movq number_of_people, %rcx

	# Set the counter of maximum name length to '0'.
	movq $0, %rdi

	# Exit if there is no record
	cmp $0, %rcx
	je finish

loop_on_person:
	# Set the current name length to '0'.
	movq $0, %rax

	# Get the address of first char from the name offset - it is contained within the address of NAME_PTR_OFFSET(%rbx).
	movq NAME_PTR_OFFSET(%rbx), %rsi
		
check_current_char:
	# Load the value of current char address within %rdx - that way it helps debugging - the char value will be seen - if required.
	# As the char is a byte, use 'movb' to load it into %dl (least significant byte of %rdx).
	movb (%rsi), %dl
	
	# Check if the current char is the null one and if so stop to increase current name length.
	cmpb $0, %dl
	je adapt_maximum
	
	# Check if the current char is a space and if so get next char address.
	cmpb $' ', %dl
	je get_next_char_address
	
	# Else increase the current length
	incq %rax
	
get_next_char_address:
	# Increase = + 1 = get next byte address.
	incq %rsi
	jmp check_current_char

adapt_maximum:
	# Compare current length with current maximum
	cmpq %rdi, %rax
	# Adapt the current maximum if the current length is greater ('g').
	cmovgq %rax, %rdi
	
get_next_person_address:	
	# Get the address of next person by adding the size of one person to the address of the struct.
	addq $PERSON_RECORD_SIZE, %rbx
	loopq loop_on_person

finish:
	# Exit syscall
	movq $60, %rax
	syscall
	
