	.globl _start

	.section .data

my_string:
	.ascii "Hello, world in ASSEMBLY !!!\n"
my_string_end:

	# Set the length of the data to be written as the difference between data start and data end.
	.equ my_string_length, my_string_end - my_string
	
	.section .text
_start:
	# Nothing important to be placed here.
	# The two 'syscall's were splitted into two sections to simplify code understanding.
	
write_data_to_stdout:
	# 'write' syscall (=1)
	movq $1, %rax
	# Set 'file descriptor' to STDOUT (=1)
	movq $1, %rdi
	# Load address of string
	leaq my_string, %rsi
	# Set the length of the string to be written
	leaq my_string_length, %rdx
	syscall
	
end:
	# Syscall exit
	xor %rdi, %rdi
	movq $60, %rax
	syscall
