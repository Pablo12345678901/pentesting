#!/usr/bin/env bash

source fonctions_personnelles

# Syntaxe
SYNTAXE="$(syntaxe_afficher_si_erreur "$(basename $0)" "[--freedos]|[--windows]")"

# Common parameters for all virtual machines
VIRTUAL_MACHINE_NAME=""
VIRTUAL_MACHINE_DIR=""
ISO_PATH=""
MEMORY_ALLOCATED="8G"
NUMBER_OF_CPU_USED=2

# By default all flags for virtual machine to run are false
FLAG_FREEDOS="false"
FLAG_WINDOWS="false"

####### BEGINNING OF OPTION MANAGEMENT ##########

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options ''  --longoptions 'freedos,windows' -q -- "$@")
# -q : quiet
# -- : to explicitly show the options end

# Test whether syntax was correct (options + arguments)
if [ $? -ne 0 ]
then
    STDERR_afficher_message "ERROR: syntax..."
    STDERR_afficher_message "$SYNTAXE"
    exit 1
fi

# Arguments check
COUNTER_OF_VIRTUAL_MACHINE=0

# Re-set options through positional parameters
eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
	--freedos )
	    ((COUNTER_OF_VIRTUAL_MACHINE++))
            FLAG_FREEDOS="true"
            shift 1
            ;;
	--windows )
	    ((COUNTER_OF_VIRTUAL_MACHINE++))
            FLAG_WINDOWS="true"
            shift 1
            ;; 
       	'--')
	    shift
	    break
      	    ;;
        * )
	    # Error management for all other bugs
            STDERR_afficher_message "ERROR: internal error...\n"
            STDERR_afficher_message "$SYNTAXE"
            exit 2
            ;;
	esac
done

# Test whether required options were provided (=test if corresponding flag is defined)
# Test if only one and not more virtual machine name was provided
if [ $COUNTER_OF_VIRTUAL_MACHINE -eq 1 ]
then
    # Test whether other arguments were provided = in excess (=test if $1 is defined)
    if [ ! -z "$1" ]
    then
        STDERR_afficher_message "\nERROR : argument(s) in excess : \"$*\".\n"
        STDERR_afficher_message "$SYNTAXE"
        exit 3
    else
        :
    fi
else
    STDERR_afficher_message "\nERROR : You must provide one and only one option specifying the virtual machine to run.\n"
    STDERR_afficher_message "$SYNTAXE"
    exit 4
fi

########## END OF OPTION MANAGEMENT ####################

# FreeDos
if [ "$FLAG_FREEDOS" = "true" ]
then
    VIRTUAL_MACHINE_NAME="FreeDos"
    VIRTUAL_MACHINE_DIR="$REPERTOIRE_QEMU_FILES/freedos"
    ISO_PATH="${VIRTUAL_MACHINE_DIR}/freedos.iso"
    FILE_DONT_KNOW_WHAT_IT_IS="${VIRTUAL_MACHINE_DIR}/c.hd"
    
    # Run with optimization about CPU (much faster than by default)
    qemu-system-x86_64 \
	-enable-kvm -cpu host -m "$MEMORY_ALLOCATED" -smp $NUMBER_OF_CPU_USED \
	-hda "$FILE_DONT_KNOW_WHAT_IT_IS" -cdrom "$ISO_PATH" -boot d &&
        # Showing end message
	echo -e "\nExiting VM : $VIRTUAL_MACHINE_NAME...\n" &&
	exit 0
fi

# Windows
if [ "$FLAG_WINDOWS" = "true" ]
then
    VIRTUAL_MACHINE_NAME="Windows"
    echo -e "\nDEBUG : script in dev - here will come the windows VM qemu command." &&
    # Showing end message
    echo -e "\nExiting VM : $VIRTUAL_MACHINE_NAME...\n" &&
    exit 0
fi

#############################################################

: <<"GENERALTHEORY"
The general form of a QEMU command line can be expressed as:

$ qemu-system-x86_64 \
                [machine opts] \
                [cpu opts] \
                [accelerator opts] \
                [device opts] \
                [backend opts] \
                [interface opts] \
                [boot opts]

Machine : Define the machine type, amount of memory etc

CPU : Type and number/topology of vCPUs. Most accelerators offer a host cpu option which simply passes through your host CPU configuration without filtering out any features.

Accelerator : This will depend on the hypervisor you run. Note that the default is TCG, which is purely emulated, so you must specify an accelerator type to take advantage of hardware virtualization.

Devices : Additional devices that are not defined by default with the machine type.

Backends : Backends are how QEMU deals with the guestâ€™s data, for example how a block device is stored, how network devices see the network or how a serial device is directed to the outside world.

Interfaces : How the system is displayed, how it is managed and controlled or debugged.

Boot : How the system boots, via firmware or direct kernel boot.

GENERALTHEORY

#############################################################

: <<"CODEINDEV"

# Adapted line codes
sudo qemu-system-x86_64 \
   -M microvm,x-option-roms=off,pit=off,pic=off,isa-serial=off,rtc=off \
   -enable-kvm -cpu host -m "$MEMORY_ALLOCATED" -smp $NUMBER_OF_CPU_USED \
   -kernel "$ISO_PATH" -append "console=hvc0 root=/dev/vda" \
   -nodefaults -no-user-config -nographic \
   -chardev stdio,id=virtiocon0 \
   -device virtio-serial-device \
   -device virtconsole,chardev=virtiocon0 \
   -drive id=test,file="$IMG_PATH",format=raw,if=none \
   -device virtio-blk-device,drive=test \
   -netdev tap,id=tap0,script=no,downscript=no \
   -device virtio-net-device,netdev=tap0

# Comments about above command :
# Machine :
# -M : machine type supported by QEMU
# x-option-roms=<bool> : Set off to disable loading option ROMs - https://en.wikipedia.org/wiki/Option_ROM
# pit=<OnOffAuto> : Enable i8254 PIT - Programmable Interval Timer (PIT) chip (Intel 8253/8254) basically consists of an oscillator, a prescaler and 3 independent frequency dividers.
# pic=<OnOffAuto> : Enable i8259 PIC - The 8259 Programmable Interrupt Controller (PIC) is one of the most important chips making up the x86 architecture. Without it, the x86 architecture would not be an interrupt driven architecture. The function of the 8259A is to manage hardware interrupts and send them to the appropriate system interrupt. This allows the system to respond to devices needs without loss of time (from polling the device, for instance).
# isa-serial=<bool> : Set off to disable the instantiation an ISA serial port - Industry Standard Architecture (ISA) is the 16-bit internal bus of IBM PC/AT and similar computers based on the Intel 80286 and its immediate successors during the 1980s.
# rtc=<OnOffAuto> : Enable MC146818 RTC (Real-Time Clock from Motorola

# -enable-kvm : Kernel-based Virtual Machine (KVM) is a free and open-source virtualization module in the Linux kernel that allows the kernel to function as a hypervisor.
# -smp : Symmetric multiprocessing or shared-memory multiprocessing (SMP)

CODEINDEV

#############################################################

: <<"Originallinecodes"
# microvm : https://www.qemu.org/docs/master/system/i386/microvm.html
# "This is an example of a VM with all optional legacy features disabled:"

qemu-system-x86_64 \
   -M microvm,x-option-roms=off,pit=off,pic=off,isa-serial=off,rtc=off \
   -enable-kvm -cpu host -m 512m -smp 2 \
   -kernel vmlinux -append "console=hvc0 root=/dev/vda" \
   -nodefaults -no-user-config -nographic \
   -chardev stdio,id=virtiocon0 \
   -device virtio-serial-device \
   -device virtconsole,chardev=virtiocon0 \
   -drive id=test,file=test.img,format=raw,if=none \
   -device virtio-blk-device,drive=test \
   -netdev tap,id=tap0,script=no,downscript=no \
   -device virtio-net-device,netdev=tap0

Originallinecodes

#############################################################
